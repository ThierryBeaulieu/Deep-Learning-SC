// Generated by CIRCT firtool-1.62.0
module NeuralNetwork(
  input        clock,
               reset,
  input  [7:0] s_axis_tdata,
  input  [1:0] s_axis_tkeep,
  input        s_axis_tvalid,
               s_axis_tlast,
  output       s_axis_tready,
  output [7:0] m_axis_tdata,
  output [1:0] m_axis_tkeep,
  output       m_axis_tvalid,
               m_axis_tlast,
  input        m_axis_tready
);

  wire [7:0][4:0] _GEN = '{5'h16, 5'hA, 5'hF, 5'hC, 5'h8, 5'h4, 5'h2, 5'h1};
  reg             sending;
  reg  [2:0]      receiveCounter;
  reg  [2:0]      sendCounter;
  wire            _GEN_0 = s_axis_tvalid & s_axis_tlast;
  wire            _GEN_1 = sending & m_axis_tready;
  wire            _GEN_2 = sendCounter == receiveCounter - 3'h1;
  always @(posedge clock) begin
    if (reset) begin
      sending <= 1'h0;
      receiveCounter <= 3'h0;
      sendCounter <= 3'h0;
    end
    else begin
      automatic logic _GEN_3 = _GEN_1 & _GEN_2;
      sending <= ~_GEN_3 & (_GEN_0 | sending);
      if (_GEN_3)
        receiveCounter <= 3'h0;
      else if (s_axis_tvalid)
        receiveCounter <= receiveCounter + 3'h1;
      if (_GEN_1) begin
        if (_GEN_2)
          sendCounter <= 3'h0;
        else
          sendCounter <= sendCounter + 3'h1;
      end
    end
  end // always @(posedge)
  assign s_axis_tready = ~_GEN_0;
  assign m_axis_tdata = _GEN_1 ? {3'h0, _GEN[sendCounter]} : 8'h0;
  assign m_axis_tkeep = 2'h1;
  assign m_axis_tvalid = _GEN_1 & ~_GEN_2;
  assign m_axis_tlast = _GEN_1 & _GEN_2;
endmodule

